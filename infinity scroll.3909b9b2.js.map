{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,uCAOA,MAAMC,EAAO,CACTC,OAAQC,SAASC,cAAc,gBAC/BC,UAAWF,SAASC,cAAc,YAClCE,SAAUH,SAASC,cAAc,cAErC,IAAIG,EAAU,KACd,MAAMC,EAAa,IAAI,EAAAT,EAAAU,YACvBR,EAAKC,OAAOQ,iBAAiB,UAG7BC,eAAsCC,GAOlC,GANAA,EAAIC,iBA0DR,WACIZ,EAAKI,UAAUS,UAAY,E,CA1D3BC,GAEAP,EAAWQ,MAAQJ,EAAIK,OAAOC,SAASC,YAAYC,MAAMC,OACzDb,EAAWc,YAEc,KAArBd,EAAWQ,MAEX,YADAO,EAAAC,OAAOC,QAAQ,0CAInB,IACI,MAAMC,KAAEA,SAAelB,EAAWmB,cAClC,GAAyB,IAArBD,EAAKE,KAAKC,OAGV,OAFAN,EAAAC,OAAOC,QAAQ,iFACfxB,EAAKC,OAAO4B,QAGhBP,EAAAC,OAAOO,QAAQ,oBAAoBL,EAAKM,qBAExC/B,EAAKI,UAAUS,WAAY,EAAAmB,EAAAC,SAAmBR,EAAKE,MACnDpB,EAAW2B,gBAEX5B,EAAU,IAAI6B,EAAAC,GAAJ,CAAmB,cAAe,CACpCC,aAAc,IACdC,YAAY,G,CAEtB,MAAOC,GACLC,QAAQC,IAAIF,E,KAkCpB,SAASG,IACL,MAAQC,OAAQC,GAAe1C,SAASC,cAAc,YAAY0C,kBAAkBC,wBAEpFC,OAAOC,SAAS,CACZC,IAAkB,EAAbL,EACLM,SAAU,U,CAdD,IAAIC,sBArBLzC,MAAO0C,IACnB,IAAK,MAAMC,KAASD,EAChB,GAAIC,EAAMC,gBAAuC,KAArB/C,EAAWQ,MAEnC,IACI,MAAMU,KAAEA,SAAelB,EAAWmB,cAClC1B,EAAKI,UAAUmD,mBAAmB,aAAa,EAAAvB,EAAAC,SAAmBR,EAAKE,OACvEpB,EAAW2B,gBAEX5B,EAAQkD,UACRd,G,CACF,MAAOH,GACLC,QAAQC,IAAIF,E,IAMZ,CACZkB,WAAY,UAGPC,QAAQ1D,EAAKK","sources":["src/js/infinityScroll.js"],"sourcesContent":["import { PixabayAPI } from './pixabay-api';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport createGalleryCards from '../templates/gallery-card.hbs';\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\n\nconst refs = {\n    formEl: document.querySelector('.search-form'),\n    galleryEl: document.querySelector('.gallery'),\n    sentinel: document.querySelector('#sentinel'),\n}\nlet gallery = null;\nconst pixabayAPI = new PixabayAPI();\nrefs.formEl.addEventListener('submit', handleSearchFormSubmit);\n\n\nasync function handleSearchFormSubmit(evt) {\n    evt.preventDefault();\n    clearMarkup();\n\n    pixabayAPI.query = evt.target.elements.searchQuery.value.trim();\n    pixabayAPI.resetPage();\n\n    if (pixabayAPI.query === '') {\n        Notify.failure(\"Sorry, enter something in search line.\");\n        return;\n    };\n\n    try {\n        const { data } = await pixabayAPI.fetchPhotos();\n        if (data.hits.length === 0) {\n            Notify.failure(\"Sorry, there are no images matching your search query. Please try again.\");\n            refs.formEl.reset();\n            return;\n        }\n        Notify.success(`Hooray! We found ${data.totalHits} images.`);\n\n        refs.galleryEl.innerHTML = createGalleryCards(data.hits);\n        pixabayAPI.incrementPage();\n\n        gallery = new SimpleLightbox('.gallery  a', {\n                captionDelay: 250,\n                scrollZoom: false,\n        });\n    } catch (err) {\n        console.log(err);\n    }\n};\n\nconst onEntry = async (entries) => {\n    for (const entry of entries) {\n        if (entry.isIntersecting && pixabayAPI.query !== '') {\n\n            try {\n                const { data } = await pixabayAPI.fetchPhotos();\n                refs.galleryEl.insertAdjacentHTML('beforeend', createGalleryCards(data.hits));\n                pixabayAPI.incrementPage();\n\n                gallery.refresh();\n                smoothScroll();\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    };\n};\n\nconst options = {\n    rootMargin: '150px',\n}\nconst observer = new IntersectionObserver(onEntry, options);\nobserver.observe(refs.sentinel);\n\n\n\nfunction clearMarkup() {\n    refs.galleryEl.innerHTML = '';\n};\n\nfunction smoothScroll() {\n    const { height: cardHeight } = document.querySelector(\".gallery\").firstElementChild.getBoundingClientRect();\n\n    window.scrollBy({\n        top: cardHeight * 2,\n        behavior: \"smooth\",\n    });\n};\n\n\n\n"],"names":["$6fOXY","parcelRequire","$2ce415f148c0c897$var$refs","formEl","document","querySelector","galleryEl","sentinel","$2ce415f148c0c897$var$gallery","$2ce415f148c0c897$var$pixabayAPI","PixabayAPI","addEventListener","async","evt","preventDefault","innerHTML","$2ce415f148c0c897$var$clearMarkup","query","target","elements","searchQuery","value","trim","resetPage","$iQIUW","Notify","failure","data","fetchPhotos","hits","length","reset","success","totalHits","$cdIRi","default","incrementPage","$parcel$interopDefault","$fZKcF","captionDelay","scrollZoom","err","console","log","$2ce415f148c0c897$var$smoothScroll","height","cardHeight","firstElementChild","getBoundingClientRect","window","scrollBy","top","behavior","IntersectionObserver","entries","entry","isIntersecting","insertAdjacentHTML","refresh","rootMargin","observe"],"version":3,"file":"infinity scroll.3909b9b2.js.map"}