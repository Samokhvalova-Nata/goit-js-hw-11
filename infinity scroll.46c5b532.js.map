{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,iEAOMC,EAAO,CACTC,OAAQC,SAASC,cAAc,gBAC/BC,UAAWF,SAASC,cAAc,YAClCE,SAAUH,SAASC,cAAc,cAEjCG,EAAU,KACRC,EAAa,IAAI,EAAAC,EAAAC,Y,SAIRC,I,OAAAA,EAAfC,EAAAb,EAAA,CAAAa,EAAAC,GAAAC,MAAA,SAAAC,EAAsCC,G,IActBC,E,qEAbZD,EAAIE,iBACJC,IACAC,EAASC,UAAUpB,EAAKK,UAExBE,EAAWc,MAAQN,EAAIO,OAAOC,SAASC,YAAYC,MAAMC,OACzDnB,EAAWoB,YAEc,KAArBpB,EAAWc,MAAY,C,sBACvBO,EAAAC,OAAOC,QAAQ,0C,oDAKQvB,EAAWwB,c,WACT,KADnBf,EAAMgB,EAAAC,KAAJjB,MACCkB,KAAKC,OAAY,C,uBACtBP,EAAAC,OAAOC,QAAQ,4EACf9B,EAAKC,OAAOmC,Q,2BAGhBR,EAAAC,OAAOQ,QAAQ,oBAAmCC,OAAftB,EAAKuB,UAAU,aAElDvC,EAAKI,UAAUoC,WAAY,EAAAC,EAAAC,SAAmB1B,EAAKkB,MACnD3B,EAAWoC,gBAEPC,KAAKC,KAAK7B,EAAKuB,UAAYhC,EAAWuC,SAAWvC,EAAWwC,MAC5D5B,EAAS6B,QAAQhD,EAAKK,UAG1BC,EAAU,IAAIK,EAAAsC,GAAJ,CAAmB,cAAe,CACpCC,aAAc,IACdC,YAAY,I,kDAGpBC,QAAQC,IAAGrB,EAAAsB,I,2DAlCkBC,MAAAC,KAAAC,U,CAHrCzD,EAAKC,OAAOyD,iBAAiB,U,SAGS3C,G,OAAvBL,EAAsB6C,MAAAC,KAAAC,U,IAsCjC,I,EAAME,G,EAAUhD,EAAAb,EAAA,CAAAa,EAAAC,GAAAC,MAAA,SAAAC,EAAO8C,G,IAClBC,EAAAC,EAAAC,EAAAC,EAAAC,EAIejD,E,kEAJf6C,GAAW,EAAXC,GAAW,EAAXC,OAAWG,E,SAAXF,EAAeJ,EAAOO,OAAAC,Y,UAAtBP,GAAAI,EAAAD,EAAWK,QAAAC,KAAA,C,oBAAXL,EAAWxC,MACF8C,gBAAuC,KAArBhE,EAAWc,MAAY,C,yCAGpBd,EAAWwB,c,OAA5Bf,EAAMgB,EAAAC,KAAJjB,KACRhB,EAAKI,UAAUoE,mBAAmB,aAAa,EAAA/B,EAAAC,SAAmB1B,EAAKkB,OACvE3B,EAAWoC,gBAEXrC,EAAQmE,UAuBWC,SAAvBC,SAAuBD,EAAAxE,SAASC,cAAc,YAAYyE,kBAAkBC,wBAA5EF,EAAuBD,EAAvBI,OAERC,OAAOC,SAAS,CACZC,IAAkB,EAAbN,EACLO,SAAU,W,kDAxBF9B,QAAQC,IAAGrB,EAAAsB,I,QAXlBO,GAAW,E,yEAAXC,GAAW,EAAXC,EAAW/B,EAAAmD,G,4BAAXtB,GAAW,MAAXG,EAAWoB,QAAXpB,EAAWoB,S,sBAAXtB,EAAW,C,sBAAXC,E,0FA8BT,IACmCW,EAAvBC,C,0DAhCef,G,iCAqBrBzC,EAAW,IAAIkE,qBAAqB1B,EAH1B,CACZ2B,WAAY,UAQhB,SAASpE,IACLlB,EAAKI,UAAUoC,UAAY,E","sources":["src/js/infinityScroll.js"],"sourcesContent":["import { PixabayAPI } from './pixabay-api';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport createGalleryCards from '../templates/gallery-card.hbs';\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\n\nconst refs = {\n    formEl: document.querySelector('.search-form'),\n    galleryEl: document.querySelector('.gallery'),\n    sentinel: document.querySelector('#sentinel'),\n}\nlet gallery = null;\nconst pixabayAPI = new PixabayAPI();\nrefs.formEl.addEventListener('submit', handleSearchFormSubmit);\n\n\nasync function handleSearchFormSubmit(evt) {\n    evt.preventDefault();\n    clearMarkup();\n    observer.unobserve(refs.sentinel);\n\n    pixabayAPI.query = evt.target.elements.searchQuery.value.trim();\n    pixabayAPI.resetPage();\n\n    if (pixabayAPI.query === '') {\n        Notify.failure(\"Sorry, enter something in search line.\");\n        return;\n    };\n\n    try {\n        const { data } = await pixabayAPI.fetchPhotos();\n        if (data.hits.length === 0) {\n            Notify.failure(\"Sorry, there are no images matching your search query. Please try again.\");\n            refs.formEl.reset();\n            return;\n        }\n        Notify.success(`Hooray! We found ${data.totalHits} images.`);\n\n        refs.galleryEl.innerHTML = createGalleryCards(data.hits);\n        pixabayAPI.incrementPage();\n\n        if (Math.ceil(data.totalHits / pixabayAPI.count) !== pixabayAPI.page) {\n            observer.observe(refs.sentinel);\n        }\n\n        gallery = new SimpleLightbox('.gallery  a', {\n                captionDelay: 250,\n                scrollZoom: false,\n        });\n    } catch (err) {\n        console.log(err);\n    }\n};\n\n    const onEntry = async (entries) => {\n    for (const entry of entries) {\n        if (entry.isIntersecting && pixabayAPI.query !== '') {\n\n            try {\n                const { data } = await pixabayAPI.fetchPhotos();\n                refs.galleryEl.insertAdjacentHTML('beforeend', createGalleryCards(data.hits));\n                pixabayAPI.incrementPage();\n\n                gallery.refresh();\n                smoothScroll();\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    };\n};\n\nconst options = {\n    rootMargin: '150px',\n};\nconst observer = new IntersectionObserver(onEntry, options);\n\n\n\n\n\nfunction clearMarkup() {\n    refs.galleryEl.innerHTML = '';\n};\n\nfunction smoothScroll() {\n    const { height: cardHeight } = document.querySelector(\".gallery\").firstElementChild.getBoundingClientRect();\n\n    window.scrollBy({\n        top: cardHeight * 2,\n        behavior: \"smooth\",\n    });\n};\n\n\n\n"],"names":["$bpxeT","parcelRequire","$0dda5a411dab1a32$var$refs","formEl","document","querySelector","galleryEl","sentinel","$0dda5a411dab1a32$var$gallery","$0dda5a411dab1a32$var$pixabayAPI","$8H72y","PixabayAPI","$0dda5a411dab1a32$var$_handleSearchFormSubmit","$parcel$interopDefault","$2TvXO","mark","_callee","evt","data","preventDefault","$0dda5a411dab1a32$var$clearMarkup","$0dda5a411dab1a32$var$observer","unobserve","query","target","elements","searchQuery","value","trim","resetPage","$h6c0i","Notify","failure","fetchPhotos","_ctx","sent","hits","length","reset","success","concat","totalHits","innerHTML","$86MAb","default","incrementPage","Math","ceil","count","page","observe","$5IjG7","captionDelay","scrollZoom","console","log","t0","apply","this","arguments","addEventListener","$0dda5a411dab1a32$var$onEntry","entries","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","undefined","Symbol","iterator","next","done","isIntersecting","insertAdjacentHTML","refresh","ref","cardHeight","firstElementChild","getBoundingClientRect","height","window","scrollBy","top","behavior","t1","return","IntersectionObserver","rootMargin"],"version":3,"file":"infinity scroll.46c5b532.js.map"}